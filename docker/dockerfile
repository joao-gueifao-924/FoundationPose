# Stage 1: Builder stage with development tools
FROM nvidia/cuda:12.8.1-cudnn-devel-ubuntu24.04 AS builder

# Set ARG for noninteractive frontend to avoid prompts
ARG DEBIAN_FRONTEND=noninteractive

# Install essential build dependencies and runtime dependencies needed during build
RUN apt-get update && apt-get install -y --no-install-recommends
RUN apt-get install -y \
     git cmake wget \
     python3-dev python3-pip python-is-python3 python3.12-venv

# We don't use Python virtual environments. We install everything into root environment.
RUN python -m pip config set global.break-system-packages true

# RUN apt-get update && apt-get install -y --no-install-recommends \
#     git curl wget ca-certificates gnupg build-essential  \
#     bzip2 checkinstall gfortran \
#     libjpeg8-dev libtiff6 pkg-config yasm \

#     libboost-all-dev \
#     libgl1 libglx-mesa0 \
#     ninja-build \
# && apt-get clean \
# && rm -rf /var/lib/apt/lists/*

# Build and install pybind11
RUN cd /opt && git clone https://github.com/pybind/pybind11 &&\
    cd pybind11 && git checkout v2.13.6 &&\
    mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release -DPYBIND11_INSTALL=ON -DPYBIND11_TEST=OFF -DCMAKE_INSTALL_PREFIX=/install_prefix &&\
    make -j$(nproc) && make install && \
    rm -rf /opt/pybind11

# Build and install Eigen
RUN cd /opt && wget https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.gz &&\
    tar xvzf ./eigen-3.4.0.tar.gz &&\
    cd eigen-3.4.0 &&\
    mkdir build && cd build &&\
    cmake .. -DCMAKE_INSTALL_PREFIX=/install_prefix &&\
    make install && \
    rm -rf /opt/eigen-3.4.0 /opt/eigen-3.4.0.tar.gz


# Build and install nvdiffrast
RUN cd /opt && git clone https://github.com/NVlabs/nvdiffrast && \
    cd nvdiffrast && pip install --no-cache-dir . && \
    rm -rf /opt/nvdiffrast

# Copy and build custom C++ code
COPY mycpp mycpp
COPY build_all.sh build_all.sh
RUN chmod +x build_all.sh && ./build_all.sh  
        # This script builds 'mycpp' and leaves artifacts in mycpp/build


# # --- Stage 2: Final runtime image ---
# Use the 'devel' image instead of 'runtime' because CUDA headers are needed at runtime
FROM nvidia/cuda:12.8.1-cudnn-devel-ubuntu24.04


# # Set ARG for noninteractive frontend
ARG DEBIAN_FRONTEND=noninteractive

# # Install only necessary runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends
RUN apt-get install -y \
     python3 python3-pip python-is-python3 \
     libgl1 libglx-mesa0 \
# #     # Add runtime libs for OpenCV (avoid -dev packages)
# #     # Add runtime libs for Boost (specific versions needed by mycpp, adjust based on linkage)
# #     # Check Ubuntu 24.04 package names/versions - these are examples
# #     libboost-program-options1.83.0 libboost-filesystem1.83.0 libboost-thread1.83.0 libboost-python1.83.0 \
# #     # Runtime GL libs
# #     libgl1 libglx-mesa0 \
     && apt-get clean \
     && rm -rf /var/lib/apt/lists/*

# # Set Environment variables
# ENV NVIDIA_DISABLE_REQUIRE=1
# ENV SHELL=/bin/bash
# ENV OPENCV_IO_ENABLE_OPENEXR=1
# # Add compiled custom libs to the library path if they are not in standard locations
# ENV LD_LIBRARY_PATH=/install_prefix/lib:$LD_LIBRARY_PATH

# # Set Python config again in final stage
RUN python -m pip config set global.break-system-packages true

# # Copy installed Python packages from builder stage
# # Adjust python version path if necessary (e.g., python3.12)
COPY --from=builder /usr/local/lib/python3.12/dist-packages /usr/local/lib/python3.12/dist-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# # Copy compiled C++ dependencies (pybind11, Eigen) from builder stage install prefix
#COPY --from=builder /install_prefix /install_prefix
# # Make sure Eigen headers are findable if needed at runtime (unlikely but possible)
#COPY --from=builder /install_prefix/include/eigen3 /usr/local/include/eigen3

# # Copy compiled artifacts from custom C++ build (adjust source path based on build_all.sh)
COPY --from=builder /mycpp/build /mycpp/build

RUN pip install --no-cache-dir torch torchvision --index-url https://download.pytorch.org/whl/cu126 && \
    pip install --no-cache-dir trimesh scipy open3d opencv-python-headless transformations ruamel.yaml kornia omegaconf h5py ninja warp-lang

# Copy application code
COPY learning learning
COPY weights weights
COPY datareader.py datareader.py
COPY estimater.py estimater.py
COPY offscreen_renderer.py offscreen_renderer.py
COPY Utils.py Utils.py
COPY run_demo2.py run_demo2.py

# Set default command
CMD ["python", "run_demo2.py"]
