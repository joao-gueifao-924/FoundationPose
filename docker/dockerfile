FROM ubuntu:24.04   

# Install dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gnupg2 curl ca-certificates wget ca-certificates gnupg gcc g++ make \
    && rm -rf /var/lib/apt/lists/*

##### BEGIN of CUDA 12.1 toolkit installation #####

# Download and install libtinfo5, Ubuntu 24.04 has moved to libtinfo6. 
# The former is still used by CUDA toolkit up to 12.4 at least (and consequently 12.1).
RUN wget http://security.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.3-2ubuntu0.1_amd64.deb \
    && dpkg -i libtinfo5_6.3-2ubuntu0.1_amd64.deb \
    && rm libtinfo5_6.3-2ubuntu0.1_amd64.deb


# Install NVIDIA CUDA 12.1 Toolkit from NVIDIA's official package repository for Ubuntu 22.04.
# (NVIDIA repos repositories don't have it for Ubuntu 24.04).

RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
RUN dpkg -i cuda-keyring_1.1-1_all.deb
RUN apt-get update
RUN apt-get install -y cuda-toolkit-12-1

# Set environment variables
ENV PATH=/usr/local/cuda-12.1/bin:${PATH}
ENV LD_LIBRARY_PATH=/usr/local/cuda-12.1/lib64:${LD_LIBRARY_PATH}

# Ensure CUDA toolkit installation
RUN nvcc --version

##### END of CUDA toolkit installation #####

RUN apt-get update && \
    apt-get install -y libgtk2.0-dev && \
    apt-get install -y wget bzip2 ca-certificates curl git vim tmux g++ gcc build-essential cmake checkinstall gfortran libjpeg8-dev libtiff5-dev pkg-config yasm libavcodec-dev libavformat-dev libswscale-dev


RUN cd / && git clone https://github.com/pybind/pybind11 &&\
    cd pybind11 && git checkout v2.10.0 &&\
    mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release -DPYBIND11_INSTALL=ON -DPYBIND11_TEST=OFF &&\
    make -j$(nproc) && make install


RUN cd / && wget https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.gz &&\
    tar xvzf ./eigen-3.4.0.tar.gz &&\
    cd eigen-3.4.0 &&\
    mkdir build &&\
    cd build &&\
    cmake .. &&\
    make install

SHELL ["/bin/bash", "--login", "-c"]

RUN apt-get install -y python-is-python3 python3-pip python3.12-venv
RUN python -m pip config set global.break-system-packages true


RUN pip install torch==2.2.2 torchvision==0.17.2 --index-url https://download.pytorch.org/whl/cu121

RUN MAX_JOBS=$(nproc) pip install "git+https://github.com/facebookresearch/pytorch3d.git@stable"
RUN pip install scipy joblib scikit-learn ruamel.yaml trimesh pyyaml opencv-python imageio open3d transformations warp-lang einops kornia pyrender

# Skip NVIDIA KAOLIN installation for now. We don't need it because we are only going to perform 3D model-based pose estimation.
# Kaolin is solely used for model-free pose estimation pipelines.
# RUN cd / && git clone --recursive https://github.com/NVIDIAGameWorks/kaolin
# RUN conda activate my && cd /kaolin &&\
#     FORCE_CUDA=1 python setup.py develop

RUN cd / && git clone https://github.com/NVlabs/nvdiffrast && cd /nvdiffrast && pip install .

ENV OPENCV_IO_ENABLE_OPENEXR=1

RUN pip install scikit-image meshcat webdataset omegaconf pypng roma seaborn opencv-contrib-python openpyxl wandb imgaug Ninja xlsxwriter timm albumentations xatlas rtree nodejs jupyterlab objaverse g4f ultralytics==8.0.120 pycocotools videoio numba
RUN pip install h5py

RUN apt-get install -y libboost-all-dev

# Need to install gcc-12 and g++-12 because NVCC in CUDA 12.1 does not support GNU versions above 12.
# Ubuntu 24.04 has moved to 13.x versions.
RUN apt update &&\
    apt install -y gcc-12 g++-12 &&\
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 12 &&\
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 12 &&\
    update-alternatives --install /usr/bin/cc cc /usr/bin/gcc-12 12 &&\
    update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++-12 12

# Need to downgrade numpy because PyBind 2.10.0 is incompatible with Numpy 2.x.
RUN pip install 'numpy<2'

# Useful for debugging dockerized python scripts
RUN pip install debugpy

ENV NVIDIA_DISABLE_REQUIRE=1
ENV SHELL=/bin/bash
RUN ln -sf /bin/bash /bin/sh

COPY learning learning
COPY mycpp mycpp
COPY weights weights
COPY datareader.py datareader.py
COPY estimater.py estimater.py
COPY offscreen_renderer.py offscreen_renderer.py
COPY run_demo2.py run_demo2.py
COPY Utils.py Utils.py

COPY build_all.sh build_all.sh
RUN chmod +x build_all.sh
RUN ./build_all.sh

CMD ["python", "run_demo2.py"]
