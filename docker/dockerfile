FROM nvidia/cuda:12.8.1-cudnn-devel-ubuntu24.04

# Install dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gnupg2 curl ca-certificates wget ca-certificates gnupg gcc g++ make \
    && rm -rf /var/lib/apt/lists/*


RUN apt-get update && \
    apt-get install -y libgtk2.0-dev && \
    apt-get install -y wget bzip2 ca-certificates curl git vim tmux g++ gcc build-essential cmake checkinstall gfortran libjpeg8-dev libtiff5-dev pkg-config yasm libavcodec-dev libavformat-dev libswscale-dev

# Before the pybind11 installation, add this line to install Python development headers
RUN apt-get update && apt-get install -y python3-dev python3-pip

RUN cd / && git clone https://github.com/pybind/pybind11 &&\
    cd pybind11 && git checkout v2.13.6 &&\
    mkdir build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Release -DPYBIND11_INSTALL=ON -DPYBIND11_TEST=OFF &&\
    make -j$(nproc) && make install


RUN cd / && wget https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.gz &&\
    tar xvzf ./eigen-3.4.0.tar.gz &&\
    cd eigen-3.4.0 &&\
    mkdir build &&\
    cd build &&\
    cmake .. &&\
    make install

SHELL ["/bin/bash", "--login", "-c"]

RUN apt-get install -y python-is-python3 python3-pip python3.12-venv
RUN python -m pip config set global.break-system-packages true

RUN pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu126
RUN pip install scipy joblib scikit-learn ruamel.yaml trimesh pyyaml opencv-python imageio open3d transformations warp-lang einops kornia pyrender

# Skip NVIDIA KAOLIN installation for now. We don't need it because we are only going to perform 3D model-based pose estimation.
# Kaolin is solely used for model-free pose estimation pipelines.
# RUN cd / && git clone --recursive https://github.com/NVIDIAGameWorks/kaolin
# RUN conda activate my && cd /kaolin &&\
#     FORCE_CUDA=1 python setup.py develop

RUN cd / && git clone https://github.com/NVlabs/nvdiffrast && cd /nvdiffrast && pip install .

ENV OPENCV_IO_ENABLE_OPENEXR=1

RUN pip install scikit-image meshcat webdataset omegaconf pypng roma seaborn opencv-contrib-python openpyxl wandb imgaug Ninja xlsxwriter timm albumentations xatlas rtree nodejs jupyterlab objaverse g4f ultralytics==8.0.120 pycocotools videoio numba
RUN pip install h5py numpy

RUN apt-get install -y libboost-all-dev

RUN apt-get update && apt-get install -y libgl1 libglx-mesa0


# Useful for debugging dockerized python scripts
RUN pip install debugpy

ENV NVIDIA_DISABLE_REQUIRE=1
ENV SHELL=/bin/bash
RUN ln -sf /bin/bash /bin/sh

COPY mycpp mycpp
COPY build_all.sh build_all.sh
RUN chmod +x build_all.sh
RUN ./build_all.sh

COPY learning learning
COPY weights weights
COPY datareader.py datareader.py
COPY estimater.py estimater.py
COPY offscreen_renderer.py offscreen_renderer.py
COPY Utils.py Utils.py
COPY run_demo2.py run_demo2.py



CMD ["python", "run_demo2.py"]
